Самые популярные форматы обмена данными — это CSV, JSON и XML. CSV мы разобрали еще в первом модуле: научились импортировать и экспортировать данные с разными настройками разделителей, кавычек и заголовков. XML на курсе рассматривать не будем (к счастью, сейчас он встречается заметно реже CSV и JSON). Дело за JSON!

Если вам часто приходится анализировать данные из XML — дайте знать в комментариях. Возможно, сделаю отдельную лекцию про него.

***********************
Валидатор JSON https://jsonlint.com

***********************

Какой бывает JSON
Прежде чем работать с JSON в SQLite — вспомним, что это вообще такое.

Простейший JSON-документ — это одиночное значение: строка, число, true / false или null. Это все корректные JSON-документы:

"привет"
42
true
null
JSON-документ может содержать массив — список одиночных значений:

[1, 2, 3, 4]
["one", "two", "three"]
["RUR", "Рубли", 1.0, true]
JSON-документ может содержать объект:

{
    "code": "RUR",
    "name": "Рубли",
    "rate": 1.0,
    "default": true
}
Наконец, JSON-документ может содержать массив объектов:

[
    {
        "code": "BYR",
        "name": "Белорусские рубли",
        "rate": 0.034966,
        "default": false
    },
    {
        "code": "EUR",
        "name": "Евро",
        "rate": 0.011138,
        "default": false
    },
    {
        "code": "RUR",
        "name": "Рубли",
        "rate": 1.0,
        "default": true
    }
]
Итого, корректный JSON — это:

одиночное значение;
или объект;
или массив.
Каждый атрибут объекта и каждый элемент массива тоже должны быть корректным JSON:

{
    "name": {
        "first_name": "Вероника",
        "last_name": "Супрун"
    },
    "age": 25,
    "email": "veronica@ya.ru",
    "phones": [
        "+7 909 663-12-47",
        "+7 916 223-91-54"
    ],
    "languages": [
        {
            "code": "en",
            "level": "intermediate"
        },
        {
            "code": "ru",
            "level": "native"
        }
    ],
    "vip": true
}
Давайте закрепим понимание задачками.