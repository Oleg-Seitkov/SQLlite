Начнем с датасета валют — currency.sample.json . Это небольшой набор данных простой структуры:

Атрибут	Тип в JSON	Тип в SQLite	Описание
code	string	text	ISO-код валюты
name	string	text	Название валюты
rate	number	real	Курс по отношению к рублю
default	boolean	integer	Признак валюты по умолчанию

Фрагмент исходного файла:

[
    {
        "code": "BYR",
        "name": "Белорусские рубли",
        "rate": 0.034966,
        "default": false
    },
    {
        "code": "EUR",
        "name": "Евро",
        "rate": 0.011138,
        "default": false
    },
    {
        "code": "RUR",
        "name": "Рубли",
        "rate": 1.0,
        "default": true
    },
    ...
]
Сначала покажу, как выбрать валюты прямо из файла с помощью SQLite, а затем разберем, как это работает:

select
  json_extract(value, '$.code') as code,
  json_extract(value, '$.name') as name,
  json_extract(value, '$.rate') as rate,
  json_extract(value, '$.default') as "default"
from
  json_each(readfile('currency.sample.json'))
;
┌──────┬───────────────────┬────────────┬─────────┐
│ code │       name        │    rate    │ default │
├──────┼───────────────────┼────────────┼─────────┤
│ AZN  │ Манаты            │ 0.023107   │ 0       │
│ BYR  │ Белорусские рубли │ 0.034966   │ 0       │
│ EUR  │ Евро              │ 0.011138   │ 0       │
│ GEL  │ Грузинский лари   │ 0.0344     │ 0       │
│ KGS  │ Киргизский сом    │ 1.131738   │ 0       │
│ KZT  │ Тенге             │ 5.699857   │ 0       │
│ RUR  │ Рубли             │ 1.0        │ 1       │
│ UAH  │ Гривны            │ 0.380539   │ 0       │
│ USD  │ Доллары           │ 0.013601   │ 0       │
│ UZS  │ Узбекский сум     │ 142.441417 │ 0       │
└──────┴───────────────────┴────────────┴─────────┘
Что здесь происходит:

Функция readfile(path) считывает содержимое файла с диска одним куском.
Функция json_each(json) парсит JSON и превращает его в виртуальную таблицу. Каждый элемент исходного списка превращается в отдельную запись таблицы. Позже посмотрим, какую именно таблицу создает json_each().
Функция json_extract(json, selector) считывает атрибут JSON, на который указывает селектор. Позже посмотрим, какие бывают селекторы.
default — зарезервированное слово в SQLite. Чтобы создать столбец с таким названием, его приходится брать в двойные кавычки.
SQLite автоматически преобразовал типы данных JSON в «родные» для себя:

with currency as (
  select
    json_extract(value, '$.code') as code,
    json_extract(value, '$.name') as name,
    json_extract(value, '$.rate') as rate,
    json_extract(value, '$.default') as "default"
  from
    json_each(readfile('currency.sample.json'))
)
select
  typeof(code),
  typeof(name),
  typeof(rate),
  typeof("default")
from currency
limit 1;
┌──────────────┬──────────────┬──────────────┬───────────────────┐
│ typeof(code) │ typeof(name) │ typeof(rate) │ typeof("default") │
├──────────────┼──────────────┼──────────────┼───────────────────┤
│ text         │ text         │ real         │ integer           │
└──────────────┴──────────────┴──────────────┴───────────────────┘
Теперь с currency можно работать как с обычной таблицей. Лучше всего превратить ее в реальную таблицу базы, чтобы не парсить каждый раз JSON из файла. Как это сделать, мы посмотрим позже, а пока разберемся с функциями json_extract() и json_each().

json_extract()
Функция json_extract(json, selector) извлекает из json-документа конкретное значение, которое лежит по указанному в selector пути.

Например:

with tbl as (
  select '{ "code": "RUR", "name": "Рубли"}' as json
)
select
  json_extract(json, '$.code') as extracted
from tbl;
┌───────────┐
│ extracted │
├───────────┤
│ RUR       │
└───────────┘
Или так:

with tbl as (
  select '[10, 20, 30, 40]' as json
)
select
  json_extract(json, '$[0]') as extracted
from tbl;
┌───────────┐
│ extracted │
├───────────┤
│ 10        │
└───────────┘
Как строится селектор

Селектор всегда начинается с $ — он как бы указывает на JSON-документ в целом. Дальше — в зависимости от того, что из себя представляет JSON. Как обсуждали на предыдущем уроке, возможны три варианта:

Обычное значение. Селектор останется $, добавлять к нему нечего.
Массив. Селектор примет вид $[index], где index — порядковый номер элемента массива, начиная с 0.
Объект. Селектор пример вид $.attribute, где attribute — название атрибута объекта.
Чем более сложный JSON, тем специфичнее (длиннее) может быть селектор. Например, такой документ:

[
    {
        "name": {
            "first_name": "Вероника",
            "last_name": "Супрун"
        },
        "age": 25,
        "email": "veronica@ya.ru",
        "phones": [
            "+7 909 663-12-47",
            "+7 916 223-91-54"
        ],
        "languages": [
            {
                "code": "en",
                "level": "intermediate"
            },
            {
                "code": "ru",
                "level": "native"
            }
        ],
        "vip": true
    },
    {
        "name": { ... },
        ...
    },
    ...
]
Допустим, хотим выбрать уровень владения вторым языком у первого человека в списке. Поможет такой селектор:

$[0].languages[1].level
$[0] — первый человек,
.languages — список языков у него,
[1] — второй язык,
.level — уровень владения.