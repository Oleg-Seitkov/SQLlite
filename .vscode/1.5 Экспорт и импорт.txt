Помните, раньше мы импортировали city.csv в таблицу city? CSV-файл тогда был «каноничного» формата, с запятыми-разделителями и заголовками.

Конечно, так бывает не всегда. Допустим, есть у нас файл samara.csv:

6300000200000|"Жигулевск"
6300001000000|"Кинель"
6301700100000|"Нефтегорск"
6300000300000|"Новокуйбышевск"
6300000400000|"Октябрьск"
6300000500000|"Отрадный"
6300000900000|"Похвистнево"
6300000100000|"Самара"
6300000800000|"Сызрань"
6300000700000|"Тольятти"
6300000600000|"Чапаевск"
Попробуем загрузить его в таблицу samara (песочница):

.import --csv samara.csv samara
.mode box
select * from samara limit 5;
┌────────────────────────────────┐
│   6300000200000|"Жигулевск"    │
├────────────────────────────────┤
│ 6300001000000|"Кинель"         │
│ 6301700100000|"Нефтегорск"     │
│ 6300000300000|"Новокуйбышевск" │
│ 6300000400000|"Октябрьск"      │
│ 6300000500000|"Отрадный"       │
└────────────────────────────────┘
Явно не то, что нужно.

Получается, при импорте нужны такие же настройки, как при экспорте — разделители, заголовки, кавычки. Логично, что и настраиваются они точно так же:

drop table if exists samara;
create table samara (kladr_id, name);
.mode csv
.headers on
.separator |
.import samara.csv samara
.mode box
select * from samara limit 5;
┌───────────────┬────────────────┐
│   kladr_id    │      name      │
├───────────────┼────────────────┤
│ 6300000200000 │ Жигулевск      │
│ 6300001000000 │ Кинель         │
│ 6301700100000 │ Нефтегорск     │
│ 6300000300000 │ Новокуйбышевск │
│ 6300000400000 │ Октябрьск      │
└───────────────┴────────────────┘
Другое дело!

А если вместо samara.csv у нас samara.json?

[
    { "kladr_id": "6300000200000", "name": "Жигулевск" },
    { "kladr_id": "6300001000000", "name": "Кинель" },
    { "kladr_id": "6301700100000", "name": "Нефтегорск" },
    { "kladr_id": "6300000300000", "name": "Новокуйбышевск" },
    { "kladr_id": "6300000400000", "name": "Октябрьск" },
    { "kladr_id": "6300000500000", "name": "Отрадный" },
    { "kladr_id": "6300000900000", "name": "Похвистнево" },
    { "kladr_id": "6300000100000", "name": "Самара" },
    { "kladr_id": "6300000800000", "name": "Сызрань" },
    { "kladr_id": "6300000700000", "name": "Тольятти" },
    { "kladr_id": "6300000600000", "name": "Чапаевск" }
]
drop table if exists samara;
create table samara (kladr_id, name);
.mode json
.import samara.json samara
.mode box
select * from samara limit 5;
┌────────────────────────────────────────────────────────────────┬──────┐
│                            kladr_id                            │ name │
├────────────────────────────────────────────────────────────────┼──────┤
│ [                                                              │      │
│     { "kladr_id": "6300000200000", "name": "Жигулевск" },      │      │
│     { "kladr_id": "6300001000000", "name": "Кинель" },         │      │
│     { "kladr_id": "6301700100000", "name": "Нефтегорск" },     │      │
│     { "kladr_id": "6300000300000", "name": "Новокуйбышевск" }, │      │
└────────────────────────────────────────────────────────────────┴──────┘
Магия не сработала, файл загрузился криво. Как импортировать JSON — посмотрим в отдельном модуле.

Итого:

Настройки .mode, .headers и .separator задают формат экспорта и импорта данных.
Команда .once в связке с select экспортирует данные в любом формате от CSV до JSON и Markdown.
Команда .import загружает CSV, но не понимает JSON.

